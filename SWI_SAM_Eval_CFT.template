{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "This template installs SolarWinds Orion based family products. **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
  
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "Machine specific" },
          "Parameters": [ "InstanceType", "KeyName" ]
        },
        {
          "Label": { "default": "Orion specific" },
          "Parameters": [ "Products", "AdvancedInstallation" ]
        },
        {
          "Label": { "default": "DB specific" },
          "Parameters": [ "AdvancedInstallation", "SqlUserName", "SqlPassword", "CreateNewDatabase", "OrionDatabaseName", "OrionDbAccountName", "OrionDatabaseAccountPassword" ]
        }
      ]
    }
  },

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "Default": "m4.2xlarge",
      "AllowedValues": [ "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge" ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },

    "Products": {
      "Description": "A comma seperated list (spaces not allowed) of SolarWinds products that you want to install on this instance. Valid values are SAM,NPM,SRM,NCM",
      "Type": "String",
      "Default": "SAM,NPM"
    },

    "AdvancedInstallation": {
      "Description": "If true, separate SQL Server will be installed. If false, SQL express bundled in Orion will be installed.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [ "true", "false" ]
    },

    "OrionDatabaseName": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "SolarWindsOrion",
      "Description": "SolarWinds Database Name",
      "MaxLength": "25",
      "MinLength": "5",
      "Type": "String"
    },

    "SqlUserName": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "sa",
      "Description": "Admin/sa username of the SQL Server",
      "MaxLength": "25",
      "MinLength": "1",
      "Type": "String"
    },

    "SqlPassword": {
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "Description": "Password for the SQL Service account. Must be at least 8 characters containing letters, numbers and symbols",
      "MaxLength": "32",
      "MinLength": "8",
      "NoEcho": "true",
      "Type": "String"
    },

    "OrionDbAccountName": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "Default": "SolarWindsOrionDatabaseUser",
      "Description": "Username for the SolarWinds database user",
      "MaxLength": "50",
      "MinLength": "5",
      "Type": "String"
    },

    "OrionDatabaseAccountPassword": {
      "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
      "Description": "Password for the SolarWinds database user. Must be at least 8 characters containing letters, numbers and symbols",
      "MaxLength": "50",
      "MinLength": "8",
      "NoEcho": "true",
      "Type": "String"
    }
  },

  "Conditions": {
    "CreateRdsDbInstance": {
      "Fn::Equals": [
        { "Ref": "AdvancedInstallation" },
        "true"
      ]
    }
  },

  "Mappings": {
    "AWSRegion2AMI": {
      "ap-northeast-1": { "Windows2016": "ami-0e809272" },
      "ap-northeast-2": { "Windows2016": "ami-c0df71ae" },
      "ap-south-1": { "Windows2016": "ami-cab195a5" },
      "ap-southeast-1": { "Windows2016": "ami-00a2847c" },
      "ap-southeast-2": { "Windows2016": "ami-7279b010" },
      "ca-central-1": { "Windows2016": "ami-4934b22d" },
      "eu-central-1": { "Windows2016": "ami-b5530b5e" },
      "eu-west-1": { "Windows2016": "ami-4cc09a35" },
      "eu-west-2": { "Windows2016": "ami-8bd232ec" },
      "eu-west-3": { "Windows2016": "ami-b3fb4ace" },
      "sa-east-1": { "Windows2016": "ami-fa643596" },
      "us-east-1": { "Windows2016": "ami-3633b149" },
      "us-east-2": { "Windows2016": "ami-5984b43c" },
      "us-west-1": { "Windows2016": "ami-3dd1c25d" },
      "us-west-2": { "Windows2016": "ami-f3dcbc8b" }
    }
  },

  "Resources": {

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RDP, HTTP, HTTPS, ICMP",
        "SecurityGroupIngress": [
          {
            "Description": "RDP",
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "Eval Web Port",
            "IpProtocol": "tcp",
            "FromPort": "8787",
            "ToPort": "8787",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "Non-eval web port",
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "HTTPS",
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "SNMP",
            "IpProtocol": "udp",
            "FromPort": "161",
            "ToPort": "162",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "ASA polling",
            "IpProtocol": "TCP",
            "FromPort": "5671",
            "ToPort": "5671",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "Rabbit Clustering",
            "IpProtocol": "tcp",
            "FromPort": "25672",
            "ToPort": "25672",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "SWIS",
            "IpProtocol": "TCP",
            "FromPort": "17777",
            "ToPort": "17778",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "Cortex",
            "IpProtocol": "TCP",
            "FromPort": "17799",
            "ToPort": "17799",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "MS SQL Server",
            "IpProtocol": "TCP",
            "FromPort": "1433",
            "ToPort": "1433",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "Description": "tcp",
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Condition": "CreateRdsDbInstance",
      "Properties": {
        "DBSecurityGroupIngress": [
          { "EC2SecurityGroupName": { "Ref": "InstanceSecurityGroup" } }
        ],
        "GroupDescription": "Frontend Access"
      }
    },

    "SolarWindsDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Condition": "CreateRdsDbInstance",
      "Properties": {
        "DBSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
        "AllocatedStorage": "200",
        "AllowMajorVersionUpgrade": "false",
        "AutoMinorVersionUpgrade": "true",
        "DBInstanceClass": "db.m4.large",
        "Port": "1433",
        "StorageType": "gp2",
        "BackupRetentionPeriod": "7",
        "MasterUsername": { "Ref": "SqlUserName" },
        "MasterUserPassword": { "Ref": "SqlPassword" },
        "PreferredBackupWindow": "09:38-10:08",
        "PreferredMaintenanceWindow": "thu:05:30-thu:06:00",
        "Engine": "sqlserver-se",
        "EngineVersion": "13.00.4422.0.v1",
        "LicenseModel": "license-included",
        "DBInstanceIdentifier":{ "Ref":"AWS::StackName" }
      }
    },

    "WindowsServer": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": 
        "SolarWindsDatabase"
      ,
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      { "Ref": "AWS::StackId" },
                      "\n",
                      "region=",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WindowsServer.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      { "Ref": "AWS::StackId" },
                      " -r WindowsServer",
                      " --region ",
                      { "Ref": "AWS::Region" },
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\scripts\\SolarWinds-Orion-Install.exe": {
                "source": "https://downloads.solarwinds.com/solarwinds/OnlineInstallers/RTM/Solarwinds-Orion-NPM.exe"
              },
              "C:\\cfn\\scripts\\Orion-Install-Config.xml": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n",
                      "<SilentConfig>\r\n",
                      "  <InstallerConfiguration>\r\n",
                      "    <ProductsToInstall>",{ "Ref": "Products" },"</ProductsToInstall>\r\n",
                      "    <Products></Products>\r\n",
                      "    <Components></Components>\r\n",
                      "    <InstallPath></InstallPath>\r\n",
                      "    <AdvancedInstallMode>",{ "Ref": "AdvancedInstallation" },
                      "    </AdvancedInstallMode>\r\n",
                      "    <SkipConfigurationWizardRun>false</SkipConfigurationWizardRun>\r\n",
                      "  </InstallerConfiguration>\r\n",
                      "  <Host>\r\n",
                      "  <Info>\r\n",
                      "    <ReconfigureDatabase>true</ReconfigureDatabase>\r\n",
                      "    <ReconfigureWebsite>true</ReconfigureWebsite>\r\n",
                      "    <ReconfigureServices>true</ReconfigureServices>\r\n",
                      "  <Database>\r\n",
                      "    <ReconfigurePermissions>true</ReconfigurePermissions>\r\n",
                      "    <CreateNewDatabase>true</CreateNewDatabase>\r\n",
                      "    <UseSQLSecurity>true</UseSQLSecurity>\r\n",
                      "    <UseExistingSqlAccount>true</UseExistingSqlAccount>\r\n",
                      "    <DatabaseName>",{ "Ref": "OrionDatabaseName" },"</DatabaseName>\r\n",
                      "    <DatabasePath></DatabasePath>\r\n",
                      "    <ServerName>",{ "Fn::If" : [ "CreateRdsDbInstance", { "Fn::GetAtt": [ "SolarWindsDatabase", "Endpoint.Address" ] }, "localhost" ] },"</ServerName>\r\n",
                      "    <InstanceName></InstanceName>\r\n",
                      "    <UserPassword>",{ "Ref": "SqlPassword" },"</UserPassword>\r\n",
                      "    <User>",{ "Ref": "SqlUserName" },"</User>\r\n",
                      "    <Account>",{ "Ref": "OrionDbAccountName" },"</Account>\r\n",
                      "    <AccountType>NewSQL</AccountType>\r\n",
                      "    <AccountPassword>",{ "Ref": "OrionDatabaseAccountPassword" },"</AccountPassword>\r\n",
                      "    <NeedSQLServerSecurity>false</NeedSQLServerSecurity>\r\n",
                      "    <NeedToChangeSAPassword>false</NeedToChangeSAPassword>\r\n",
                      "    <SAPassword></SAPassword>\r\n",
                      "    <AddServiceDependencies>false</AddServiceDependencies>\r\n",
                      "    <RemoveServiceDependencies>false</RemoveServiceDependencies>\r\n",
                      "    <FailureInfo></FailureInfo>\r\n",
                      "  </Database>\r\n",
                      "  <Website>\r\n",
                      "    <Folder>C:\\InetPub\\SolarWinds</Folder>\r\n",
                      "    <Address>(All Unassigned)</Address>\r\n",
                      "    <Port>80</Port>\r\n",
                      "    <ApplicationName>SolarWinds Orion</ApplicationName>\r\n",
                      "    <LaunchWebConsole>false</LaunchWebConsole>\r\n",
                      "    <ConfigurationSkipped_IISNotInstalled>false</ConfigurationSkipped_IISNotInstalled>\r\n",
                      "    <EnableWindowsLogin>false</EnableWindowsLogin>\r\n",
                      "  </Website>\r\n",
                      "  </Info>\r\n",
                      "  </Host>\r\n",
                      "</SilentConfig>\r\n"
                    ]
                  ]
                }
              }
            },

            "commands": {
              "1-install-orion": {
                "command": "start /wait C:\\cfn\\scripts\\SolarWinds-Orion-Install.exe /s /notests /ConfigFile=\"C:\\cfn\\scripts\\Orion-Install-Config.xml\"",
                "waitAfterCompletion": "0"
              },
              "2-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e %ERRORLEVEL% \"",
                      { "Fn::Base64": { "Ref": "WindowsServerWaitHandle" } },
                      "\""
                    ]
                  ]
                }
              }
            },

            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [ "c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" ]
                }
              }
            }
          }
        }
      },

      "Properties": {
        "InstanceType": { "Ref": "InstanceType" },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegion2AMI",
            { "Ref": "AWS::Region" },
            "Windows2016"
          ]
        },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Ref":"AWS::StackName" }}
         ],
         "BlockDeviceMappings" : [
          { "DeviceName" : "/dev/sda1", "Ebs" : { "VolumeSize" : "100" } }
          ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<script>\n",

                "cfn-init.exe -v -s ",
                { "Ref": "AWS::StackId" },
                " -r WindowsServer",
                " --region ",
                { "Ref": "AWS::Region" },
                "\n",

                "</script>"
              ]
            ]
          }
        }
      }
    },

    "WindowsServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "WindowsServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "WindowsServer",
      "Properties": {
        "Handle": { "Ref": "WindowsServerWaitHandle" },
        "Timeout": "7200"
      }
    }
  },

  "Outputs": {
    "ProductsInstalled": {
      "Value": { "Ref": "Products" },
      "Description": "Products installed on this instance."
    },
    "DBAddress": {
      "Description": "Address of database endpoint",
      "Value": { "Fn::GetAtt": [ "SolarWindsDatabase", "Endpoint.Address" ] }
    },
    "OrionIP": {
      "Description": "IpAddress of installed machine",
      "Value": { "Fn::GetAtt": [ "WindowsServer", "PublicIp" ] }
    },
    "DBPort": {
      "Description": "Database endpoint port number",
      "Value": { "Fn::GetAtt": [ "SolarWindsDatabase", "Endpoint.Port" ] }
    }
  }
}

{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template installs SolarWinds Server and Application Manager (SAM). **WARNING** This template creates Amazon EC2 Windows instance and related resources. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "InstanceType" : {
      "Description" : "Amazon EC2 instance type",
      "Type" : "String",
      "Default" : "m4.large",
      "AllowedValues" : [ "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "Products" : {
      "Description" : "A SPACE seperated list of SolarWinds products that you want to install on this instance. Valid values are NPM and SAM.",
      "Type" : "String",
      "Default" : "SAM",
      "AllowedPattern" : "((NPM)|(SAM))"
    },
    "SqlServerName": {
        "Default": "localhost",
        "Description": "Servername where SQL Server instance is running.",
        "Type": "String"
    },
    "SqlInstanceName": {
        "AllowedPattern": "[a-zA-Z0-9]*",
        "Default": "oriondb",
        "Description": "Instance name of the SQL Server",
        "MaxLength": "25",
        "MinLength": "5",
        "Type": "String"
    },
    "SqlUserName": {
        "AllowedPattern": "[a-zA-Z0-9]*",
        "Default": "oriondbuser",
        "Description": "Username of the SQL Server",
        "MaxLength": "25",
        "MinLength": "1",
        "Type": "String"
    },
    "SqlPassword": {
        "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
        "Description": "Password for the SQL Service account. Must be at least 8 characters containing letters, numbers and symbols",
        "MaxLength": "32",
        "MinLength": "8",
        "NoEcho": "true",
        "Type": "String"
    },
    "CreateNewDatabase": {
        "AllowedPattern": "((true)|(false))",
        "Default": "true",
        "Description": "Create new database",
        "Type": "String"
    },
    "OrionDatabaseName": {
        "AllowedPattern": "[a-zA-Z0-9]*",
        "Default": "solarwindsdb",
        "Description": "SolarWinds Database Name",
        "MaxLength": "25",
        "MinLength": "5",
        "Type": "String"
    },
    "OrionDatabaseAccountName": {
        "AllowedPattern": "[a-zA-Z0-9]*",
        "Default": "oriondatabaseuser",
        "Description": "Username for the SolarWinds database user",
        "MaxLength": "25",
        "MinLength": "5",
        "Type": "String"
    },
    "OrionDatabaseAccountPassword": {
        "AllowedPattern": "(?=^.{6,255}$)((?=.*\\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*",
        "Description": "Password for the SolarWinds database user. Must be at least 8 characters containing letters, numbers and symbols",
        "MaxLength": "32",
        "MinLength": "8",
        "NoEcho": "true",
        "Type": "String"
    }
  },

  "Mappings" : {
    "AWSRegion2AMI" : {
      "us-east-1"        : {"Windows2008r2" : "ami-cf644fb4", "Windows2012r2" : "ami-c6e9d9bd"},
      "us-west-2"        : {"Windows2008r2" : "ami-6763831f", "Windows2012r2" : "ami-3c4ba944"},
      "us-west-1"        : {"Windows2008r2" : "ami-d5ddf6b5", "Windows2012r2" : "ami-c52d07a5"},
      "eu-west-1"        : {"Windows2008r2" : "ami-d3b040aa", "Windows2012r2" : "ami-6dd02214"},
      "eu-west-2"        : {"Windows2008r2" : "ami-b3e6f7d7", "Windows2012r2" : "ami-fc8e9f98"},
      "eu-central-1"     : {"Windows2008r2" : "ami-91e940fe", "Windows2012r2" : "ami-8306afec"},
      "ap-northeast-1"   : {"Windows2008r2" : "ami-afdd28c9", "Windows2012r2" : "ami-c229dfa4"},
      "ap-northeast-2"   : {"Windows2008r2" : "ami-2141984f", "Windows2012r2" : "ami-098a5267"},
      "ap-southeast-1"   : {"Windows2008r2" : "ami-6bc35808", "Windows2012r2" : "ami-c87c19ab"},
      "ap-southeast-2"   : {"Windows2008r2" : "ami-40a8b123", "Windows2012r2" : "ami-46f1e925"},
      "ap-south-1"       : {"Windows2008r2" : "ami-6a710b05", "Windows2012r2" : "ami-82fe84ed"},
      "us-east-2"        : {"Windows2008r2" : "ami-17ab8b72", "Windows2012r2" : "ami-5d99b938"},
      "ca-central-1"     : {"Windows2008r2" : "ami-4bcb752f", "Windows2012r2" : "ami-20b50b44"},
      "sa-east-1"        : {"Windows2008r2" : "ami-5fceb833", "Windows2012r2" : "ami-f0b4c59c"},
      "cn-north-1"       : {"Windows2008r2" : "ami-3bac7c56", "Windows2012r2" : "ami-a0d909cd"}
    }

  },

  "Resources" : {

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable RDP and SQL",
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1433",
            "ToPort": "1433",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "WindowsServer": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "c:\\cfn\\cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]}
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WindowsServer.Metadata.AWS::CloudFormation::Init\n",
                  "action=cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" },
                      " -r WindowsServer",
                      " --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}
              },
             "C:\\cfn\\scripts\\SolarWinds-Orion-Install.exe": {
                                "source": "https://downloads.solarwinds.com/solarwinds/OnlineInstallers/RTM/Solarwinds-Orion-NPM.exe"
                            },
                           "C:\\cfn\\scripts\\Orion-Install-Config.xml": {
                                "content": {
                                    "Fn::Join": [
                                            "", [
                                        "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n",
"   <SilentConfig>\r\n",
"  <InstallerConfiguration>\r\n",
"            <ProductsToInstall>",
                  { "Ref" : "Products" },
            "</ProductsToInstall>\r\n",
"            <Products></Products>\r\n",
"            <Components></Components>\r\n",
"            <InstallPath></InstallPath>\r\n",
"            <AdvancedInstallMode>true</AdvancedInstallMode>\r\n",
"            <SkipConfigurationWizardRun>false</SkipConfigurationWizardRun>\r\n",
"        </InstallerConfiguration>\r\n",
"        <Host>\r\n",
"            <Info>\r\n",
"            <ReconfigureDatabase>true</ReconfigureDatabase>\r\n",
"            <ReconfigureWebsite>true</ReconfigureWebsite>\r\n",
"            <ReconfigureServices>true</ReconfigureServices>\r\n",
"            <ReconfigurePermissions>true</ReconfigurePermissions>\r\n",
"            <Database>\r\n",
"                <CreateNewDatabase>",
                  { "Ref" : "CreateNewDatabase" }, 
               "</CreateNewDatabase>\r\n",
"                <UseSQLSecurity>true</UseSQLSecurity>\r\n",
"                <UseExistingSqlAccount>true</UseExistingSqlAccount>\r\n",
"                <DatabaseName>",
                  { "Ref" : "OrionDatabaseName" },
               "</DatabaseName>\r\n",
"                <DatabasePath></DatabasePath>\r\n",
"                <ServerName>",
                  { "Ref" : "SqlServerName" }, 
               "</ServerName>\r\n",
"                <InstanceName>",
                  { "Ref" : "SqlInstanceName" }, 
                "</InstanceName>\r\n",
"                <UserPassword>",
                  { "Ref" : "SqlPassword" }, 
                "</UserPassword>\r\n",
"                <User>",
                  { "Ref" : "SqlUserName" }, 
               "</User>\r\n",
"                <Account>",
                  { "Ref" : "OrionDatabaseAccountName"},
               "</Account>\r\n",
"                <AccountType>NewSQLl</AccountType>\r\n",
"                <AccountPassword>",
                  { "Ref" : "OrionDatabaseAccountPassword"},
               "</AccountPassword>\r\n",
"                <NeedSQLServerSecurity>false</NeedSQLServerSecurity>\r\n",
"                <NeedToChangeSAPassword>false</NeedToChangeSAPassword>\r\n",
"                <SAPassword></SAPassword>\r\n",
"                <AddServiceDependencies>false</AddServiceDependencies>\r\n",
"                <RemoveServiceDependencies>false</RemoveServiceDependencies>\r\n",
"                <FailureInfo></FailureInfo>\r\n",
"            </Database>\r\n",
"            <Website>\r\n",
"                <Folder>C:\\InetPub\\SolarWinds</Folder>\r\n",
"                <Address>(All Unassigned)</Address>\r\n",
"                <Port>80</Port>\r\n",
"                <ApplicationName>SolarWinds Orion</ApplicationName>\r\n",
"                <LaunchWebConsole>false</LaunchWebConsole>\r\n",
"                <ConfigurationSkipped_IISNotInstalled>false</ConfigurationSkipped_IISNotInstalled>\r\n",
"                <EnableWindowsLogin>false</EnableWindowsLogin>\r\n",
"            </Website>\r\n",
"            </Info>\r\n",
"        </Host>\r\n",
"    </SilentConfig>\r\n"
                                        ]
                                     ]
                                }
                            }
            },
            
            "commands" : {
              "1-install-roles" : {
                "command" : { "Fn::Join" : [ "", [
                  "if not \"None\" EQU \"",
                  "Web-Server",
                  "\" (servermanagercmd -install ",
                  "Web-Server",
                  " -restart)"]]
                }
              },
              "2-install-features" : {
                "command" : { "Fn::Join" : [ "", [
                  "if not \"None\" EQU \"",
                  "NET-Framework MSMQ PowerShell-ISE",
                  "\" (servermanagercmd -install ",
                  "NET-Framework MSMQ PowerShell-ISE",
                  " -restart)"]]
                }
              },
             "3-install-orion" : {
                "command" : "start /wait C:\\cfn\\scripts\\SolarWinds-Orion-Install.exe /s /notests /ConfigFile=\"C:\\cfn\\scripts\\Orion-Install-Config.xml\"",
                "waitAfterCompletion": "0"
              },
              "4-signal-success" : {
                "command" : { "Fn::Join" : [ "", [
                  "cfn-signal.exe -e %ERRORLEVEL% \"",
                  { "Fn::Base64" : { "Ref" : "WindowsServerWaitHandle" }},
                  "\""]]
                }
              }
            },
            
            "services" : {
              "windows" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["c:\\cfn\\cfn-hup.conf", "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"]
                }
              }
            }
          }
        }
      },
      
      "Properties": {
        "InstanceType" : { "Ref" : "InstanceType" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegion2AMI", { "Ref" : "AWS::Region" }, "Windows2012r2" ]},
        "SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"} ],
        "KeyName" : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "<script>\n",

            "cfn-init.exe -v -s ", { "Ref" : "AWS::StackId" }, 
            " -r WindowsServer",
            " --region ", { "Ref" : "AWS::Region" }, "\n",
          
            "</script>"
        ]]}}
      }
    },

    "WindowsServerWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WindowsServerWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WindowsServer",
      "Properties" : {
        "Handle" : {"Ref" : "WindowsServerWaitHandle"},
        "Timeout" : "1800"
      }
    }
  },
  
  "Outputs" : {
    "ProductsInstalled" : {
      "Value" : { "Ref" : "Products" },
      "Description" : "Products installed on this instance."
    }
  }  
}
